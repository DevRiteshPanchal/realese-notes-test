name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Release Drafter
      uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Find Draft Release
      id: find_release
      run: |
        echo "Fetching the latest draft release..."
        DRAFT_RELEASE=$(curl -s \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases)

        # Check if the response contains any releases
        if [ -z "$DRAFT_RELEASE" ]; then
          echo "No releases found in the repository."
          exit 1
        fi

        # Parse the draft release using jq
        RELEASE_ID=$(echo "$DRAFT_RELEASE" | jq -r '.[] | select(.draft == true) | .id' | head -n 1)
        TAG_NAME=$(echo "$DRAFT_RELEASE" | jq -r '.[] | select(.draft == true) | .tag_name' | head -n 1)

        # Check if we found a draft release
        if [ -z "$RELEASE_ID" ]; then
          echo "No draft release found."
          exit 1
        fi

        echo "Draft release found with ID: $RELEASE_ID and Tag: $TAG_NAME"
        echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Publish Draft Release
      if: success()
      run: |
        echo "Publishing the draft release with ID: ${{ env.RELEASE_ID }}"
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }} \
          -d '{"draft":false}'

        echo "Release published with tag: ${{ env.TAG_NAME }}"

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
